// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "PEXPbMessage.pb.h"
// @@protoc_insertion_point(imports)

@implementation PexpbMessageRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [PexpbMessageRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface PEXPbMessageProtocolEnvelope ()
@property SInt32 protocolType;
@property SInt32 protocolVersion;
@property UInt32 sequenceNumber;
@property (strong) NSData* payload;
@end

@implementation PEXPbMessageProtocolEnvelope

- (BOOL) hasProtocolType {
  return !!hasProtocolType_;
}
- (void) setHasProtocolType:(BOOL) value_ {
  hasProtocolType_ = !!value_;
}
@synthesize protocolType;
- (BOOL) hasProtocolVersion {
  return !!hasProtocolVersion_;
}
- (void) setHasProtocolVersion:(BOOL) value_ {
  hasProtocolVersion_ = !!value_;
}
@synthesize protocolVersion;
- (BOOL) hasSequenceNumber {
  return !!hasSequenceNumber_;
}
- (void) setHasSequenceNumber:(BOOL) value_ {
  hasSequenceNumber_ = !!value_;
}
@synthesize sequenceNumber;
- (BOOL) hasPayload {
  return !!hasPayload_;
}
- (void) setHasPayload:(BOOL) value_ {
  hasPayload_ = !!value_;
}
@synthesize payload;
- (id) init {
  if ((self = [super init])) {
    self.protocolType = 0;
    self.protocolVersion = 0;
    self.sequenceNumber = 0;
    self.payload = [NSData data];
  }
  return self;
}
static PEXPbMessageProtocolEnvelope* defaultPEXPbMessageProtocolEnvelopeInstance = nil;
+ (void) initialize {
  if (self == [PEXPbMessageProtocolEnvelope class]) {
    defaultPEXPbMessageProtocolEnvelopeInstance = [[PEXPbMessageProtocolEnvelope alloc] init];
  }
}
+ (PEXPbMessageProtocolEnvelope*) defaultInstance {
  return defaultPEXPbMessageProtocolEnvelopeInstance;
}
- (PEXPbMessageProtocolEnvelope*) defaultInstance {
  return defaultPEXPbMessageProtocolEnvelopeInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProtocolType) {
    [output writeInt32:1 value:self.protocolType];
  }
  if (self.hasProtocolVersion) {
    [output writeInt32:2 value:self.protocolVersion];
  }
  if (self.hasSequenceNumber) {
    [output writeUInt32:3 value:self.sequenceNumber];
  }
  if (self.hasPayload) {
    [output writeData:4 value:self.payload];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasProtocolType) {
    size_ += computeInt32Size(1, self.protocolType);
  }
  if (self.hasProtocolVersion) {
    size_ += computeInt32Size(2, self.protocolVersion);
  }
  if (self.hasSequenceNumber) {
    size_ += computeUInt32Size(3, self.sequenceNumber);
  }
  if (self.hasPayload) {
    size_ += computeDataSize(4, self.payload);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PEXPbMessageProtocolEnvelope*) parseFromData:(NSData*) data {
  return (PEXPbMessageProtocolEnvelope*)[[[PEXPbMessageProtocolEnvelope builder] mergeFromData:data] build];
}
+ (PEXPbMessageProtocolEnvelope*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PEXPbMessageProtocolEnvelope*)[[[PEXPbMessageProtocolEnvelope builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PEXPbMessageProtocolEnvelope*) parseFromInputStream:(NSInputStream*) input {
  return (PEXPbMessageProtocolEnvelope*)[[[PEXPbMessageProtocolEnvelope builder] mergeFromInputStream:input] build];
}
+ (PEXPbMessageProtocolEnvelope*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PEXPbMessageProtocolEnvelope*)[[[PEXPbMessageProtocolEnvelope builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PEXPbMessageProtocolEnvelope*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PEXPbMessageProtocolEnvelope*)[[[PEXPbMessageProtocolEnvelope builder] mergeFromCodedInputStream:input] build];
}
+ (PEXPbMessageProtocolEnvelope*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PEXPbMessageProtocolEnvelope*)[[[PEXPbMessageProtocolEnvelope builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PEXPbMessageProtocolEnvelopeBuilder*) builder {
  return [[PEXPbMessageProtocolEnvelopeBuilder alloc] init];
}
+ (PEXPbMessageProtocolEnvelopeBuilder*) builderWithPrototype:(PEXPbMessageProtocolEnvelope*) prototype {
  return [[PEXPbMessageProtocolEnvelope builder] mergeFrom:prototype];
}
- (PEXPbMessageProtocolEnvelopeBuilder*) builder {
  return [PEXPbMessageProtocolEnvelope builder];
}
- (PEXPbMessageProtocolEnvelopeBuilder*) toBuilder {
  return [PEXPbMessageProtocolEnvelope builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProtocolType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"protocolType", [NSNumber numberWithInteger:self.protocolType]];
  }
  if (self.hasProtocolVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"protocolVersion", [NSNumber numberWithInteger:self.protocolVersion]];
  }
  if (self.hasSequenceNumber) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sequenceNumber", [NSNumber numberWithInteger:self.sequenceNumber]];
  }
  if (self.hasPayload) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payload", self.payload];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PEXPbMessageProtocolEnvelope class]]) {
    return NO;
  }
  PEXPbMessageProtocolEnvelope *otherMessage = other;
  return
      self.hasProtocolType == otherMessage.hasProtocolType &&
      (!self.hasProtocolType || self.protocolType == otherMessage.protocolType) &&
      self.hasProtocolVersion == otherMessage.hasProtocolVersion &&
      (!self.hasProtocolVersion || self.protocolVersion == otherMessage.protocolVersion) &&
      self.hasSequenceNumber == otherMessage.hasSequenceNumber &&
      (!self.hasSequenceNumber || self.sequenceNumber == otherMessage.sequenceNumber) &&
      self.hasPayload == otherMessage.hasPayload &&
      (!self.hasPayload || [self.payload isEqual:otherMessage.payload]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasProtocolType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.protocolType] hash];
  }
  if (self.hasProtocolVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.protocolVersion] hash];
  }
  if (self.hasSequenceNumber) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sequenceNumber] hash];
  }
  if (self.hasPayload) {
    hashCode = hashCode * 31 + [self.payload hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PEXPbMessageProtocolEnvelopeBuilder()
@property (strong) PEXPbMessageProtocolEnvelope* result;
@end

@implementation PEXPbMessageProtocolEnvelopeBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PEXPbMessageProtocolEnvelope alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PEXPbMessageProtocolEnvelopeBuilder*) clear {
  self.result = [[PEXPbMessageProtocolEnvelope alloc] init];
  return self;
}
- (PEXPbMessageProtocolEnvelopeBuilder*) clone {
  return [PEXPbMessageProtocolEnvelope builderWithPrototype:result];
}
- (PEXPbMessageProtocolEnvelope*) defaultInstance {
  return [PEXPbMessageProtocolEnvelope defaultInstance];
}
- (PEXPbMessageProtocolEnvelope*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PEXPbMessageProtocolEnvelope*) buildPartial {
  PEXPbMessageProtocolEnvelope* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PEXPbMessageProtocolEnvelopeBuilder*) mergeFrom:(PEXPbMessageProtocolEnvelope*) other {
  if (other == [PEXPbMessageProtocolEnvelope defaultInstance]) {
    return self;
  }
  if (other.hasProtocolType) {
    [self setProtocolType:other.protocolType];
  }
  if (other.hasProtocolVersion) {
    [self setProtocolVersion:other.protocolVersion];
  }
  if (other.hasSequenceNumber) {
    [self setSequenceNumber:other.sequenceNumber];
  }
  if (other.hasPayload) {
    [self setPayload:other.payload];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PEXPbMessageProtocolEnvelopeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PEXPbMessageProtocolEnvelopeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setProtocolType:[input readInt32]];
        break;
      }
      case 16: {
        [self setProtocolVersion:[input readInt32]];
        break;
      }
      case 24: {
        [self setSequenceNumber:[input readUInt32]];
        break;
      }
      case 34: {
        [self setPayload:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasProtocolType {
  return result.hasProtocolType;
}
- (SInt32) protocolType {
  return result.protocolType;
}
- (PEXPbMessageProtocolEnvelopeBuilder*) setProtocolType:(SInt32) value {
  result.hasProtocolType = YES;
  result.protocolType = value;
  return self;
}
- (PEXPbMessageProtocolEnvelopeBuilder*) clearProtocolType {
  result.hasProtocolType = NO;
  result.protocolType = 0;
  return self;
}
- (BOOL) hasProtocolVersion {
  return result.hasProtocolVersion;
}
- (SInt32) protocolVersion {
  return result.protocolVersion;
}
- (PEXPbMessageProtocolEnvelopeBuilder*) setProtocolVersion:(SInt32) value {
  result.hasProtocolVersion = YES;
  result.protocolVersion = value;
  return self;
}
- (PEXPbMessageProtocolEnvelopeBuilder*) clearProtocolVersion {
  result.hasProtocolVersion = NO;
  result.protocolVersion = 0;
  return self;
}
- (BOOL) hasSequenceNumber {
  return result.hasSequenceNumber;
}
- (UInt32) sequenceNumber {
  return result.sequenceNumber;
}
- (PEXPbMessageProtocolEnvelopeBuilder*) setSequenceNumber:(UInt32) value {
  result.hasSequenceNumber = YES;
  result.sequenceNumber = value;
  return self;
}
- (PEXPbMessageProtocolEnvelopeBuilder*) clearSequenceNumber {
  result.hasSequenceNumber = NO;
  result.sequenceNumber = 0;
  return self;
}
- (BOOL) hasPayload {
  return result.hasPayload;
}
- (NSData*) payload {
  return result.payload;
}
- (PEXPbMessageProtocolEnvelopeBuilder*) setPayload:(NSData*) value {
  result.hasPayload = YES;
  result.payload = value;
  return self;
}
- (PEXPbMessageProtocolEnvelopeBuilder*) clearPayload {
  result.hasPayload = NO;
  result.payload = [NSData data];
  return self;
}
@end

@interface PEXPbSTPSimple ()
@property SInt32 ampType;
@property SInt32 ampVersion;
@property UInt32 sequenceNumber;
@property UInt64 messageSentMiliUtc;
@property UInt32 randomNonce;
@property (strong) NSString* sender;
@property (strong) NSString* destination;
@property SInt32 destinationType;
@property (strong) NSData* signature;
@property SInt32 signatureVersion;
@property (strong) NSString* certificateVersion;
@property (strong) NSData* iv;
@property (strong) NSData* eAsymBlock;
@property SInt32 eAsymBlockVersion;
@property (strong) NSData* eSymBlock;
@property SInt32 eSymBlockVersion;
@property (strong) NSData* hmac;
@property SInt32 hmacVersion;
@property (strong) NSData* encKey;
@property (strong) NSData* macKey;
@property (strong) NSData* payload;
@property SInt32 protocolType;
@property SInt32 protocolVersion;
@end

@implementation PEXPbSTPSimple

- (BOOL) hasAmpType {
  return !!hasAmpType_;
}
- (void) setHasAmpType:(BOOL) value_ {
  hasAmpType_ = !!value_;
}
@synthesize ampType;
- (BOOL) hasAmpVersion {
  return !!hasAmpVersion_;
}
- (void) setHasAmpVersion:(BOOL) value_ {
  hasAmpVersion_ = !!value_;
}
@synthesize ampVersion;
- (BOOL) hasSequenceNumber {
  return !!hasSequenceNumber_;
}
- (void) setHasSequenceNumber:(BOOL) value_ {
  hasSequenceNumber_ = !!value_;
}
@synthesize sequenceNumber;
- (BOOL) hasMessageSentMiliUtc {
  return !!hasMessageSentMiliUtc_;
}
- (void) setHasMessageSentMiliUtc:(BOOL) value_ {
  hasMessageSentMiliUtc_ = !!value_;
}
@synthesize messageSentMiliUtc;
- (BOOL) hasRandomNonce {
  return !!hasRandomNonce_;
}
- (void) setHasRandomNonce:(BOOL) value_ {
  hasRandomNonce_ = !!value_;
}
@synthesize randomNonce;
- (BOOL) hasSender {
  return !!hasSender_;
}
- (void) setHasSender:(BOOL) value_ {
  hasSender_ = !!value_;
}
@synthesize sender;
- (BOOL) hasDestination {
  return !!hasDestination_;
}
- (void) setHasDestination:(BOOL) value_ {
  hasDestination_ = !!value_;
}
@synthesize destination;
- (BOOL) hasDestinationType {
  return !!hasDestinationType_;
}
- (void) setHasDestinationType:(BOOL) value_ {
  hasDestinationType_ = !!value_;
}
@synthesize destinationType;
- (BOOL) hasSignature {
  return !!hasSignature_;
}
- (void) setHasSignature:(BOOL) value_ {
  hasSignature_ = !!value_;
}
@synthesize signature;
- (BOOL) hasSignatureVersion {
  return !!hasSignatureVersion_;
}
- (void) setHasSignatureVersion:(BOOL) value_ {
  hasSignatureVersion_ = !!value_;
}
@synthesize signatureVersion;
- (BOOL) hasCertificateVersion {
  return !!hasCertificateVersion_;
}
- (void) setHasCertificateVersion:(BOOL) value_ {
  hasCertificateVersion_ = !!value_;
}
@synthesize certificateVersion;
- (BOOL) hasIv {
  return !!hasIv_;
}
- (void) setHasIv:(BOOL) value_ {
  hasIv_ = !!value_;
}
@synthesize iv;
- (BOOL) hasEAsymBlock {
  return !!hasEAsymBlock_;
}
- (void) setHasEAsymBlock:(BOOL) value_ {
  hasEAsymBlock_ = !!value_;
}
@synthesize eAsymBlock;
- (BOOL) hasEAsymBlockVersion {
  return !!hasEAsymBlockVersion_;
}
- (void) setHasEAsymBlockVersion:(BOOL) value_ {
  hasEAsymBlockVersion_ = !!value_;
}
@synthesize eAsymBlockVersion;
- (BOOL) hasESymBlock {
  return !!hasESymBlock_;
}
- (void) setHasESymBlock:(BOOL) value_ {
  hasESymBlock_ = !!value_;
}
@synthesize eSymBlock;
- (BOOL) hasESymBlockVersion {
  return !!hasESymBlockVersion_;
}
- (void) setHasESymBlockVersion:(BOOL) value_ {
  hasESymBlockVersion_ = !!value_;
}
@synthesize eSymBlockVersion;
- (BOOL) hasHmac {
  return !!hasHmac_;
}
- (void) setHasHmac:(BOOL) value_ {
  hasHmac_ = !!value_;
}
@synthesize hmac;
- (BOOL) hasHmacVersion {
  return !!hasHmacVersion_;
}
- (void) setHasHmacVersion:(BOOL) value_ {
  hasHmacVersion_ = !!value_;
}
@synthesize hmacVersion;
- (BOOL) hasEncKey {
  return !!hasEncKey_;
}
- (void) setHasEncKey:(BOOL) value_ {
  hasEncKey_ = !!value_;
}
@synthesize encKey;
- (BOOL) hasMacKey {
  return !!hasMacKey_;
}
- (void) setHasMacKey:(BOOL) value_ {
  hasMacKey_ = !!value_;
}
@synthesize macKey;
- (BOOL) hasPayload {
  return !!hasPayload_;
}
- (void) setHasPayload:(BOOL) value_ {
  hasPayload_ = !!value_;
}
@synthesize payload;
- (BOOL) hasProtocolType {
  return !!hasProtocolType_;
}
- (void) setHasProtocolType:(BOOL) value_ {
  hasProtocolType_ = !!value_;
}
@synthesize protocolType;
- (BOOL) hasProtocolVersion {
  return !!hasProtocolVersion_;
}
- (void) setHasProtocolVersion:(BOOL) value_ {
  hasProtocolVersion_ = !!value_;
}
@synthesize protocolVersion;
- (id) init {
  if ((self = [super init])) {
    self.ampType = 0;
    self.ampVersion = 0;
    self.sequenceNumber = 0;
    self.messageSentMiliUtc = 0L;
    self.randomNonce = 0;
    self.sender = @"";
    self.destination = @"";
    self.destinationType = 0;
    self.signature = [NSData data];
    self.signatureVersion = 0;
    self.certificateVersion = @"";
    self.iv = [NSData data];
    self.eAsymBlock = [NSData data];
    self.eAsymBlockVersion = 0;
    self.eSymBlock = [NSData data];
    self.eSymBlockVersion = 0;
    self.hmac = [NSData data];
    self.hmacVersion = 0;
    self.encKey = [NSData data];
    self.macKey = [NSData data];
    self.payload = [NSData data];
    self.protocolType = 0;
    self.protocolVersion = 0;
  }
  return self;
}
static PEXPbSTPSimple* defaultPEXPbSTPSimpleInstance = nil;
+ (void) initialize {
  if (self == [PEXPbSTPSimple class]) {
    defaultPEXPbSTPSimpleInstance = [[PEXPbSTPSimple alloc] init];
  }
}
+ (PEXPbSTPSimple*) defaultInstance {
  return defaultPEXPbSTPSimpleInstance;
}
- (PEXPbSTPSimple*) defaultInstance {
  return defaultPEXPbSTPSimpleInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAmpType) {
    [output writeInt32:1 value:self.ampType];
  }
  if (self.hasAmpVersion) {
    [output writeInt32:2 value:self.ampVersion];
  }
  if (self.hasSequenceNumber) {
    [output writeUInt32:3 value:self.sequenceNumber];
  }
  if (self.hasMessageSentMiliUtc) {
    [output writeUInt64:4 value:self.messageSentMiliUtc];
  }
  if (self.hasRandomNonce) {
    [output writeUInt32:5 value:self.randomNonce];
  }
  if (self.hasSender) {
    [output writeString:6 value:self.sender];
  }
  if (self.hasDestination) {
    [output writeString:7 value:self.destination];
  }
  if (self.hasDestinationType) {
    [output writeInt32:8 value:self.destinationType];
  }
  if (self.hasSignature) {
    [output writeData:9 value:self.signature];
  }
  if (self.hasSignatureVersion) {
    [output writeInt32:10 value:self.signatureVersion];
  }
  if (self.hasCertificateVersion) {
    [output writeString:11 value:self.certificateVersion];
  }
  if (self.hasIv) {
    [output writeData:12 value:self.iv];
  }
  if (self.hasEAsymBlock) {
    [output writeData:13 value:self.eAsymBlock];
  }
  if (self.hasEAsymBlockVersion) {
    [output writeInt32:14 value:self.eAsymBlockVersion];
  }
  if (self.hasESymBlock) {
    [output writeData:15 value:self.eSymBlock];
  }
  if (self.hasESymBlockVersion) {
    [output writeInt32:16 value:self.eSymBlockVersion];
  }
  if (self.hasHmac) {
    [output writeData:17 value:self.hmac];
  }
  if (self.hasHmacVersion) {
    [output writeInt32:18 value:self.hmacVersion];
  }
  if (self.hasEncKey) {
    [output writeData:19 value:self.encKey];
  }
  if (self.hasMacKey) {
    [output writeData:20 value:self.macKey];
  }
  if (self.hasPayload) {
    [output writeData:21 value:self.payload];
  }
  if (self.hasProtocolType) {
    [output writeInt32:22 value:self.protocolType];
  }
  if (self.hasProtocolVersion) {
    [output writeInt32:23 value:self.protocolVersion];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAmpType) {
    size_ += computeInt32Size(1, self.ampType);
  }
  if (self.hasAmpVersion) {
    size_ += computeInt32Size(2, self.ampVersion);
  }
  if (self.hasSequenceNumber) {
    size_ += computeUInt32Size(3, self.sequenceNumber);
  }
  if (self.hasMessageSentMiliUtc) {
    size_ += computeUInt64Size(4, self.messageSentMiliUtc);
  }
  if (self.hasRandomNonce) {
    size_ += computeUInt32Size(5, self.randomNonce);
  }
  if (self.hasSender) {
    size_ += computeStringSize(6, self.sender);
  }
  if (self.hasDestination) {
    size_ += computeStringSize(7, self.destination);
  }
  if (self.hasDestinationType) {
    size_ += computeInt32Size(8, self.destinationType);
  }
  if (self.hasSignature) {
    size_ += computeDataSize(9, self.signature);
  }
  if (self.hasSignatureVersion) {
    size_ += computeInt32Size(10, self.signatureVersion);
  }
  if (self.hasCertificateVersion) {
    size_ += computeStringSize(11, self.certificateVersion);
  }
  if (self.hasIv) {
    size_ += computeDataSize(12, self.iv);
  }
  if (self.hasEAsymBlock) {
    size_ += computeDataSize(13, self.eAsymBlock);
  }
  if (self.hasEAsymBlockVersion) {
    size_ += computeInt32Size(14, self.eAsymBlockVersion);
  }
  if (self.hasESymBlock) {
    size_ += computeDataSize(15, self.eSymBlock);
  }
  if (self.hasESymBlockVersion) {
    size_ += computeInt32Size(16, self.eSymBlockVersion);
  }
  if (self.hasHmac) {
    size_ += computeDataSize(17, self.hmac);
  }
  if (self.hasHmacVersion) {
    size_ += computeInt32Size(18, self.hmacVersion);
  }
  if (self.hasEncKey) {
    size_ += computeDataSize(19, self.encKey);
  }
  if (self.hasMacKey) {
    size_ += computeDataSize(20, self.macKey);
  }
  if (self.hasPayload) {
    size_ += computeDataSize(21, self.payload);
  }
  if (self.hasProtocolType) {
    size_ += computeInt32Size(22, self.protocolType);
  }
  if (self.hasProtocolVersion) {
    size_ += computeInt32Size(23, self.protocolVersion);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PEXPbSTPSimple*) parseFromData:(NSData*) data {
  return (PEXPbSTPSimple*)[[[PEXPbSTPSimple builder] mergeFromData:data] build];
}
+ (PEXPbSTPSimple*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PEXPbSTPSimple*)[[[PEXPbSTPSimple builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PEXPbSTPSimple*) parseFromInputStream:(NSInputStream*) input {
  return (PEXPbSTPSimple*)[[[PEXPbSTPSimple builder] mergeFromInputStream:input] build];
}
+ (PEXPbSTPSimple*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PEXPbSTPSimple*)[[[PEXPbSTPSimple builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PEXPbSTPSimple*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PEXPbSTPSimple*)[[[PEXPbSTPSimple builder] mergeFromCodedInputStream:input] build];
}
+ (PEXPbSTPSimple*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PEXPbSTPSimple*)[[[PEXPbSTPSimple builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PEXPbSTPSimpleBuilder*) builder {
  return [[PEXPbSTPSimpleBuilder alloc] init];
}
+ (PEXPbSTPSimpleBuilder*) builderWithPrototype:(PEXPbSTPSimple*) prototype {
  return [[PEXPbSTPSimple builder] mergeFrom:prototype];
}
- (PEXPbSTPSimpleBuilder*) builder {
  return [PEXPbSTPSimple builder];
}
- (PEXPbSTPSimpleBuilder*) toBuilder {
  return [PEXPbSTPSimple builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAmpType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ampType", [NSNumber numberWithInteger:self.ampType]];
  }
  if (self.hasAmpVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ampVersion", [NSNumber numberWithInteger:self.ampVersion]];
  }
  if (self.hasSequenceNumber) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sequenceNumber", [NSNumber numberWithInteger:self.sequenceNumber]];
  }
  if (self.hasMessageSentMiliUtc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"messageSentMiliUtc", [NSNumber numberWithLongLong:self.messageSentMiliUtc]];
  }
  if (self.hasRandomNonce) {
    [output appendFormat:@"%@%@: %@\n", indent, @"randomNonce", [NSNumber numberWithInteger:self.randomNonce]];
  }
  if (self.hasSender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sender", self.sender];
  }
  if (self.hasDestination) {
    [output appendFormat:@"%@%@: %@\n", indent, @"destination", self.destination];
  }
  if (self.hasDestinationType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"destinationType", [NSNumber numberWithInteger:self.destinationType]];
  }
  if (self.hasSignature) {
    [output appendFormat:@"%@%@: %@\n", indent, @"signature", self.signature];
  }
  if (self.hasSignatureVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"signatureVersion", [NSNumber numberWithInteger:self.signatureVersion]];
  }
  if (self.hasCertificateVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"certificateVersion", self.certificateVersion];
  }
  if (self.hasIv) {
    [output appendFormat:@"%@%@: %@\n", indent, @"iv", self.iv];
  }
  if (self.hasEAsymBlock) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eAsymBlock", self.eAsymBlock];
  }
  if (self.hasEAsymBlockVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eAsymBlockVersion", [NSNumber numberWithInteger:self.eAsymBlockVersion]];
  }
  if (self.hasESymBlock) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eSymBlock", self.eSymBlock];
  }
  if (self.hasESymBlockVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eSymBlockVersion", [NSNumber numberWithInteger:self.eSymBlockVersion]];
  }
  if (self.hasHmac) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hmac", self.hmac];
  }
  if (self.hasHmacVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hmacVersion", [NSNumber numberWithInteger:self.hmacVersion]];
  }
  if (self.hasEncKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"encKey", self.encKey];
  }
  if (self.hasMacKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"macKey", self.macKey];
  }
  if (self.hasPayload) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payload", self.payload];
  }
  if (self.hasProtocolType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"protocolType", [NSNumber numberWithInteger:self.protocolType]];
  }
  if (self.hasProtocolVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"protocolVersion", [NSNumber numberWithInteger:self.protocolVersion]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PEXPbSTPSimple class]]) {
    return NO;
  }
  PEXPbSTPSimple *otherMessage = other;
  return
      self.hasAmpType == otherMessage.hasAmpType &&
      (!self.hasAmpType || self.ampType == otherMessage.ampType) &&
      self.hasAmpVersion == otherMessage.hasAmpVersion &&
      (!self.hasAmpVersion || self.ampVersion == otherMessage.ampVersion) &&
      self.hasSequenceNumber == otherMessage.hasSequenceNumber &&
      (!self.hasSequenceNumber || self.sequenceNumber == otherMessage.sequenceNumber) &&
      self.hasMessageSentMiliUtc == otherMessage.hasMessageSentMiliUtc &&
      (!self.hasMessageSentMiliUtc || self.messageSentMiliUtc == otherMessage.messageSentMiliUtc) &&
      self.hasRandomNonce == otherMessage.hasRandomNonce &&
      (!self.hasRandomNonce || self.randomNonce == otherMessage.randomNonce) &&
      self.hasSender == otherMessage.hasSender &&
      (!self.hasSender || [self.sender isEqual:otherMessage.sender]) &&
      self.hasDestination == otherMessage.hasDestination &&
      (!self.hasDestination || [self.destination isEqual:otherMessage.destination]) &&
      self.hasDestinationType == otherMessage.hasDestinationType &&
      (!self.hasDestinationType || self.destinationType == otherMessage.destinationType) &&
      self.hasSignature == otherMessage.hasSignature &&
      (!self.hasSignature || [self.signature isEqual:otherMessage.signature]) &&
      self.hasSignatureVersion == otherMessage.hasSignatureVersion &&
      (!self.hasSignatureVersion || self.signatureVersion == otherMessage.signatureVersion) &&
      self.hasCertificateVersion == otherMessage.hasCertificateVersion &&
      (!self.hasCertificateVersion || [self.certificateVersion isEqual:otherMessage.certificateVersion]) &&
      self.hasIv == otherMessage.hasIv &&
      (!self.hasIv || [self.iv isEqual:otherMessage.iv]) &&
      self.hasEAsymBlock == otherMessage.hasEAsymBlock &&
      (!self.hasEAsymBlock || [self.eAsymBlock isEqual:otherMessage.eAsymBlock]) &&
      self.hasEAsymBlockVersion == otherMessage.hasEAsymBlockVersion &&
      (!self.hasEAsymBlockVersion || self.eAsymBlockVersion == otherMessage.eAsymBlockVersion) &&
      self.hasESymBlock == otherMessage.hasESymBlock &&
      (!self.hasESymBlock || [self.eSymBlock isEqual:otherMessage.eSymBlock]) &&
      self.hasESymBlockVersion == otherMessage.hasESymBlockVersion &&
      (!self.hasESymBlockVersion || self.eSymBlockVersion == otherMessage.eSymBlockVersion) &&
      self.hasHmac == otherMessage.hasHmac &&
      (!self.hasHmac || [self.hmac isEqual:otherMessage.hmac]) &&
      self.hasHmacVersion == otherMessage.hasHmacVersion &&
      (!self.hasHmacVersion || self.hmacVersion == otherMessage.hmacVersion) &&
      self.hasEncKey == otherMessage.hasEncKey &&
      (!self.hasEncKey || [self.encKey isEqual:otherMessage.encKey]) &&
      self.hasMacKey == otherMessage.hasMacKey &&
      (!self.hasMacKey || [self.macKey isEqual:otherMessage.macKey]) &&
      self.hasPayload == otherMessage.hasPayload &&
      (!self.hasPayload || [self.payload isEqual:otherMessage.payload]) &&
      self.hasProtocolType == otherMessage.hasProtocolType &&
      (!self.hasProtocolType || self.protocolType == otherMessage.protocolType) &&
      self.hasProtocolVersion == otherMessage.hasProtocolVersion &&
      (!self.hasProtocolVersion || self.protocolVersion == otherMessage.protocolVersion) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasAmpType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.ampType] hash];
  }
  if (self.hasAmpVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.ampVersion] hash];
  }
  if (self.hasSequenceNumber) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sequenceNumber] hash];
  }
  if (self.hasMessageSentMiliUtc) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.messageSentMiliUtc] hash];
  }
  if (self.hasRandomNonce) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.randomNonce] hash];
  }
  if (self.hasSender) {
    hashCode = hashCode * 31 + [self.sender hash];
  }
  if (self.hasDestination) {
    hashCode = hashCode * 31 + [self.destination hash];
  }
  if (self.hasDestinationType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.destinationType] hash];
  }
  if (self.hasSignature) {
    hashCode = hashCode * 31 + [self.signature hash];
  }
  if (self.hasSignatureVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.signatureVersion] hash];
  }
  if (self.hasCertificateVersion) {
    hashCode = hashCode * 31 + [self.certificateVersion hash];
  }
  if (self.hasIv) {
    hashCode = hashCode * 31 + [self.iv hash];
  }
  if (self.hasEAsymBlock) {
    hashCode = hashCode * 31 + [self.eAsymBlock hash];
  }
  if (self.hasEAsymBlockVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.eAsymBlockVersion] hash];
  }
  if (self.hasESymBlock) {
    hashCode = hashCode * 31 + [self.eSymBlock hash];
  }
  if (self.hasESymBlockVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.eSymBlockVersion] hash];
  }
  if (self.hasHmac) {
    hashCode = hashCode * 31 + [self.hmac hash];
  }
  if (self.hasHmacVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.hmacVersion] hash];
  }
  if (self.hasEncKey) {
    hashCode = hashCode * 31 + [self.encKey hash];
  }
  if (self.hasMacKey) {
    hashCode = hashCode * 31 + [self.macKey hash];
  }
  if (self.hasPayload) {
    hashCode = hashCode * 31 + [self.payload hash];
  }
  if (self.hasProtocolType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.protocolType] hash];
  }
  if (self.hasProtocolVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.protocolVersion] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PEXPbSTPSimpleBuilder()
@property (strong) PEXPbSTPSimple* result;
@end

@implementation PEXPbSTPSimpleBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PEXPbSTPSimple alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PEXPbSTPSimpleBuilder*) clear {
  self.result = [[PEXPbSTPSimple alloc] init];
  return self;
}
- (PEXPbSTPSimpleBuilder*) clone {
  return [PEXPbSTPSimple builderWithPrototype:result];
}
- (PEXPbSTPSimple*) defaultInstance {
  return [PEXPbSTPSimple defaultInstance];
}
- (PEXPbSTPSimple*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PEXPbSTPSimple*) buildPartial {
  PEXPbSTPSimple* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PEXPbSTPSimpleBuilder*) mergeFrom:(PEXPbSTPSimple*) other {
  if (other == [PEXPbSTPSimple defaultInstance]) {
    return self;
  }
  if (other.hasAmpType) {
    [self setAmpType:other.ampType];
  }
  if (other.hasAmpVersion) {
    [self setAmpVersion:other.ampVersion];
  }
  if (other.hasSequenceNumber) {
    [self setSequenceNumber:other.sequenceNumber];
  }
  if (other.hasMessageSentMiliUtc) {
    [self setMessageSentMiliUtc:other.messageSentMiliUtc];
  }
  if (other.hasRandomNonce) {
    [self setRandomNonce:other.randomNonce];
  }
  if (other.hasSender) {
    [self setSender:other.sender];
  }
  if (other.hasDestination) {
    [self setDestination:other.destination];
  }
  if (other.hasDestinationType) {
    [self setDestinationType:other.destinationType];
  }
  if (other.hasSignature) {
    [self setSignature:other.signature];
  }
  if (other.hasSignatureVersion) {
    [self setSignatureVersion:other.signatureVersion];
  }
  if (other.hasCertificateVersion) {
    [self setCertificateVersion:other.certificateVersion];
  }
  if (other.hasIv) {
    [self setIv:other.iv];
  }
  if (other.hasEAsymBlock) {
    [self setEAsymBlock:other.eAsymBlock];
  }
  if (other.hasEAsymBlockVersion) {
    [self setEAsymBlockVersion:other.eAsymBlockVersion];
  }
  if (other.hasESymBlock) {
    [self setESymBlock:other.eSymBlock];
  }
  if (other.hasESymBlockVersion) {
    [self setESymBlockVersion:other.eSymBlockVersion];
  }
  if (other.hasHmac) {
    [self setHmac:other.hmac];
  }
  if (other.hasHmacVersion) {
    [self setHmacVersion:other.hmacVersion];
  }
  if (other.hasEncKey) {
    [self setEncKey:other.encKey];
  }
  if (other.hasMacKey) {
    [self setMacKey:other.macKey];
  }
  if (other.hasPayload) {
    [self setPayload:other.payload];
  }
  if (other.hasProtocolType) {
    [self setProtocolType:other.protocolType];
  }
  if (other.hasProtocolVersion) {
    [self setProtocolVersion:other.protocolVersion];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PEXPbSTPSimpleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PEXPbSTPSimpleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAmpType:[input readInt32]];
        break;
      }
      case 16: {
        [self setAmpVersion:[input readInt32]];
        break;
      }
      case 24: {
        [self setSequenceNumber:[input readUInt32]];
        break;
      }
      case 32: {
        [self setMessageSentMiliUtc:[input readUInt64]];
        break;
      }
      case 40: {
        [self setRandomNonce:[input readUInt32]];
        break;
      }
      case 50: {
        [self setSender:[input readString]];
        break;
      }
      case 58: {
        [self setDestination:[input readString]];
        break;
      }
      case 64: {
        [self setDestinationType:[input readInt32]];
        break;
      }
      case 74: {
        [self setSignature:[input readData]];
        break;
      }
      case 80: {
        [self setSignatureVersion:[input readInt32]];
        break;
      }
      case 90: {
        [self setCertificateVersion:[input readString]];
        break;
      }
      case 98: {
        [self setIv:[input readData]];
        break;
      }
      case 106: {
        [self setEAsymBlock:[input readData]];
        break;
      }
      case 112: {
        [self setEAsymBlockVersion:[input readInt32]];
        break;
      }
      case 122: {
        [self setESymBlock:[input readData]];
        break;
      }
      case 128: {
        [self setESymBlockVersion:[input readInt32]];
        break;
      }
      case 138: {
        [self setHmac:[input readData]];
        break;
      }
      case 144: {
        [self setHmacVersion:[input readInt32]];
        break;
      }
      case 154: {
        [self setEncKey:[input readData]];
        break;
      }
      case 162: {
        [self setMacKey:[input readData]];
        break;
      }
      case 170: {
        [self setPayload:[input readData]];
        break;
      }
      case 176: {
        [self setProtocolType:[input readInt32]];
        break;
      }
      case 184: {
        [self setProtocolVersion:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAmpType {
  return result.hasAmpType;
}
- (SInt32) ampType {
  return result.ampType;
}
- (PEXPbSTPSimpleBuilder*) setAmpType:(SInt32) value {
  result.hasAmpType = YES;
  result.ampType = value;
  return self;
}
- (PEXPbSTPSimpleBuilder*) clearAmpType {
  result.hasAmpType = NO;
  result.ampType = 0;
  return self;
}
- (BOOL) hasAmpVersion {
  return result.hasAmpVersion;
}
- (SInt32) ampVersion {
  return result.ampVersion;
}
- (PEXPbSTPSimpleBuilder*) setAmpVersion:(SInt32) value {
  result.hasAmpVersion = YES;
  result.ampVersion = value;
  return self;
}
- (PEXPbSTPSimpleBuilder*) clearAmpVersion {
  result.hasAmpVersion = NO;
  result.ampVersion = 0;
  return self;
}
- (BOOL) hasSequenceNumber {
  return result.hasSequenceNumber;
}
- (UInt32) sequenceNumber {
  return result.sequenceNumber;
}
- (PEXPbSTPSimpleBuilder*) setSequenceNumber:(UInt32) value {
  result.hasSequenceNumber = YES;
  result.sequenceNumber = value;
  return self;
}
- (PEXPbSTPSimpleBuilder*) clearSequenceNumber {
  result.hasSequenceNumber = NO;
  result.sequenceNumber = 0;
  return self;
}
- (BOOL) hasMessageSentMiliUtc {
  return result.hasMessageSentMiliUtc;
}
- (UInt64) messageSentMiliUtc {
  return result.messageSentMiliUtc;
}
- (PEXPbSTPSimpleBuilder*) setMessageSentMiliUtc:(UInt64) value {
  result.hasMessageSentMiliUtc = YES;
  result.messageSentMiliUtc = value;
  return self;
}
- (PEXPbSTPSimpleBuilder*) clearMessageSentMiliUtc {
  result.hasMessageSentMiliUtc = NO;
  result.messageSentMiliUtc = 0L;
  return self;
}
- (BOOL) hasRandomNonce {
  return result.hasRandomNonce;
}
- (UInt32) randomNonce {
  return result.randomNonce;
}
- (PEXPbSTPSimpleBuilder*) setRandomNonce:(UInt32) value {
  result.hasRandomNonce = YES;
  result.randomNonce = value;
  return self;
}
- (PEXPbSTPSimpleBuilder*) clearRandomNonce {
  result.hasRandomNonce = NO;
  result.randomNonce = 0;
  return self;
}
- (BOOL) hasSender {
  return result.hasSender;
}
- (NSString*) sender {
  return result.sender;
}
- (PEXPbSTPSimpleBuilder*) setSender:(NSString*) value {
  result.hasSender = YES;
  result.sender = value;
  return self;
}
- (PEXPbSTPSimpleBuilder*) clearSender {
  result.hasSender = NO;
  result.sender = @"";
  return self;
}
- (BOOL) hasDestination {
  return result.hasDestination;
}
- (NSString*) destination {
  return result.destination;
}
- (PEXPbSTPSimpleBuilder*) setDestination:(NSString*) value {
  result.hasDestination = YES;
  result.destination = value;
  return self;
}
- (PEXPbSTPSimpleBuilder*) clearDestination {
  result.hasDestination = NO;
  result.destination = @"";
  return self;
}
- (BOOL) hasDestinationType {
  return result.hasDestinationType;
}
- (SInt32) destinationType {
  return result.destinationType;
}
- (PEXPbSTPSimpleBuilder*) setDestinationType:(SInt32) value {
  result.hasDestinationType = YES;
  result.destinationType = value;
  return self;
}
- (PEXPbSTPSimpleBuilder*) clearDestinationType {
  result.hasDestinationType = NO;
  result.destinationType = 0;
  return self;
}
- (BOOL) hasSignature {
  return result.hasSignature;
}
- (NSData*) signature {
  return result.signature;
}
- (PEXPbSTPSimpleBuilder*) setSignature:(NSData*) value {
  result.hasSignature = YES;
  result.signature = value;
  return self;
}
- (PEXPbSTPSimpleBuilder*) clearSignature {
  result.hasSignature = NO;
  result.signature = [NSData data];
  return self;
}
- (BOOL) hasSignatureVersion {
  return result.hasSignatureVersion;
}
- (SInt32) signatureVersion {
  return result.signatureVersion;
}
- (PEXPbSTPSimpleBuilder*) setSignatureVersion:(SInt32) value {
  result.hasSignatureVersion = YES;
  result.signatureVersion = value;
  return self;
}
- (PEXPbSTPSimpleBuilder*) clearSignatureVersion {
  result.hasSignatureVersion = NO;
  result.signatureVersion = 0;
  return self;
}
- (BOOL) hasCertificateVersion {
  return result.hasCertificateVersion;
}
- (NSString*) certificateVersion {
  return result.certificateVersion;
}
- (PEXPbSTPSimpleBuilder*) setCertificateVersion:(NSString*) value {
  result.hasCertificateVersion = YES;
  result.certificateVersion = value;
  return self;
}
- (PEXPbSTPSimpleBuilder*) clearCertificateVersion {
  result.hasCertificateVersion = NO;
  result.certificateVersion = @"";
  return self;
}
- (BOOL) hasIv {
  return result.hasIv;
}
- (NSData*) iv {
  return result.iv;
}
- (PEXPbSTPSimpleBuilder*) setIv:(NSData*) value {
  result.hasIv = YES;
  result.iv = value;
  return self;
}
- (PEXPbSTPSimpleBuilder*) clearIv {
  result.hasIv = NO;
  result.iv = [NSData data];
  return self;
}
- (BOOL) hasEAsymBlock {
  return result.hasEAsymBlock;
}
- (NSData*) eAsymBlock {
  return result.eAsymBlock;
}
- (PEXPbSTPSimpleBuilder*) setEAsymBlock:(NSData*) value {
  result.hasEAsymBlock = YES;
  result.eAsymBlock = value;
  return self;
}
- (PEXPbSTPSimpleBuilder*) clearEAsymBlock {
  result.hasEAsymBlock = NO;
  result.eAsymBlock = [NSData data];
  return self;
}
- (BOOL) hasEAsymBlockVersion {
  return result.hasEAsymBlockVersion;
}
- (SInt32) eAsymBlockVersion {
  return result.eAsymBlockVersion;
}
- (PEXPbSTPSimpleBuilder*) setEAsymBlockVersion:(SInt32) value {
  result.hasEAsymBlockVersion = YES;
  result.eAsymBlockVersion = value;
  return self;
}
- (PEXPbSTPSimpleBuilder*) clearEAsymBlockVersion {
  result.hasEAsymBlockVersion = NO;
  result.eAsymBlockVersion = 0;
  return self;
}
- (BOOL) hasESymBlock {
  return result.hasESymBlock;
}
- (NSData*) eSymBlock {
  return result.eSymBlock;
}
- (PEXPbSTPSimpleBuilder*) setESymBlock:(NSData*) value {
  result.hasESymBlock = YES;
  result.eSymBlock = value;
  return self;
}
- (PEXPbSTPSimpleBuilder*) clearESymBlock {
  result.hasESymBlock = NO;
  result.eSymBlock = [NSData data];
  return self;
}
- (BOOL) hasESymBlockVersion {
  return result.hasESymBlockVersion;
}
- (SInt32) eSymBlockVersion {
  return result.eSymBlockVersion;
}
- (PEXPbSTPSimpleBuilder*) setESymBlockVersion:(SInt32) value {
  result.hasESymBlockVersion = YES;
  result.eSymBlockVersion = value;
  return self;
}
- (PEXPbSTPSimpleBuilder*) clearESymBlockVersion {
  result.hasESymBlockVersion = NO;
  result.eSymBlockVersion = 0;
  return self;
}
- (BOOL) hasHmac {
  return result.hasHmac;
}
- (NSData*) hmac {
  return result.hmac;
}
- (PEXPbSTPSimpleBuilder*) setHmac:(NSData*) value {
  result.hasHmac = YES;
  result.hmac = value;
  return self;
}
- (PEXPbSTPSimpleBuilder*) clearHmac {
  result.hasHmac = NO;
  result.hmac = [NSData data];
  return self;
}
- (BOOL) hasHmacVersion {
  return result.hasHmacVersion;
}
- (SInt32) hmacVersion {
  return result.hmacVersion;
}
- (PEXPbSTPSimpleBuilder*) setHmacVersion:(SInt32) value {
  result.hasHmacVersion = YES;
  result.hmacVersion = value;
  return self;
}
- (PEXPbSTPSimpleBuilder*) clearHmacVersion {
  result.hasHmacVersion = NO;
  result.hmacVersion = 0;
  return self;
}
- (BOOL) hasEncKey {
  return result.hasEncKey;
}
- (NSData*) encKey {
  return result.encKey;
}
- (PEXPbSTPSimpleBuilder*) setEncKey:(NSData*) value {
  result.hasEncKey = YES;
  result.encKey = value;
  return self;
}
- (PEXPbSTPSimpleBuilder*) clearEncKey {
  result.hasEncKey = NO;
  result.encKey = [NSData data];
  return self;
}
- (BOOL) hasMacKey {
  return result.hasMacKey;
}
- (NSData*) macKey {
  return result.macKey;
}
- (PEXPbSTPSimpleBuilder*) setMacKey:(NSData*) value {
  result.hasMacKey = YES;
  result.macKey = value;
  return self;
}
- (PEXPbSTPSimpleBuilder*) clearMacKey {
  result.hasMacKey = NO;
  result.macKey = [NSData data];
  return self;
}
- (BOOL) hasPayload {
  return result.hasPayload;
}
- (NSData*) payload {
  return result.payload;
}
- (PEXPbSTPSimpleBuilder*) setPayload:(NSData*) value {
  result.hasPayload = YES;
  result.payload = value;
  return self;
}
- (PEXPbSTPSimpleBuilder*) clearPayload {
  result.hasPayload = NO;
  result.payload = [NSData data];
  return self;
}
- (BOOL) hasProtocolType {
  return result.hasProtocolType;
}
- (SInt32) protocolType {
  return result.protocolType;
}
- (PEXPbSTPSimpleBuilder*) setProtocolType:(SInt32) value {
  result.hasProtocolType = YES;
  result.protocolType = value;
  return self;
}
- (PEXPbSTPSimpleBuilder*) clearProtocolType {
  result.hasProtocolType = NO;
  result.protocolType = 0;
  return self;
}
- (BOOL) hasProtocolVersion {
  return result.hasProtocolVersion;
}
- (SInt32) protocolVersion {
  return result.protocolVersion;
}
- (PEXPbSTPSimpleBuilder*) setProtocolVersion:(SInt32) value {
  result.hasProtocolVersion = YES;
  result.protocolVersion = value;
  return self;
}
- (PEXPbSTPSimpleBuilder*) clearProtocolVersion {
  result.hasProtocolVersion = NO;
  result.protocolVersion = 0;
  return self;
}
@end

@interface PEXPbAMPSimple ()
@property (strong) NSData* message;
@property UInt32 nonce;
@end

@implementation PEXPbAMPSimple

- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) value_ {
  hasMessage_ = !!value_;
}
@synthesize message;
- (BOOL) hasNonce {
  return !!hasNonce_;
}
- (void) setHasNonce:(BOOL) value_ {
  hasNonce_ = !!value_;
}
@synthesize nonce;
- (id) init {
  if ((self = [super init])) {
    self.message = [NSData data];
    self.nonce = 0;
  }
  return self;
}
static PEXPbAMPSimple* defaultPEXPbAMPSimpleInstance = nil;
+ (void) initialize {
  if (self == [PEXPbAMPSimple class]) {
    defaultPEXPbAMPSimpleInstance = [[PEXPbAMPSimple alloc] init];
  }
}
+ (PEXPbAMPSimple*) defaultInstance {
  return defaultPEXPbAMPSimpleInstance;
}
- (PEXPbAMPSimple*) defaultInstance {
  return defaultPEXPbAMPSimpleInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMessage) {
    [output writeData:1 value:self.message];
  }
  if (self.hasNonce) {
    [output writeUInt32:2 value:self.nonce];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMessage) {
    size_ += computeDataSize(1, self.message);
  }
  if (self.hasNonce) {
    size_ += computeUInt32Size(2, self.nonce);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PEXPbAMPSimple*) parseFromData:(NSData*) data {
  return (PEXPbAMPSimple*)[[[PEXPbAMPSimple builder] mergeFromData:data] build];
}
+ (PEXPbAMPSimple*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PEXPbAMPSimple*)[[[PEXPbAMPSimple builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PEXPbAMPSimple*) parseFromInputStream:(NSInputStream*) input {
  return (PEXPbAMPSimple*)[[[PEXPbAMPSimple builder] mergeFromInputStream:input] build];
}
+ (PEXPbAMPSimple*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PEXPbAMPSimple*)[[[PEXPbAMPSimple builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PEXPbAMPSimple*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PEXPbAMPSimple*)[[[PEXPbAMPSimple builder] mergeFromCodedInputStream:input] build];
}
+ (PEXPbAMPSimple*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PEXPbAMPSimple*)[[[PEXPbAMPSimple builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PEXPbAMPSimpleBuilder*) builder {
  return [[PEXPbAMPSimpleBuilder alloc] init];
}
+ (PEXPbAMPSimpleBuilder*) builderWithPrototype:(PEXPbAMPSimple*) prototype {
  return [[PEXPbAMPSimple builder] mergeFrom:prototype];
}
- (PEXPbAMPSimpleBuilder*) builder {
  return [PEXPbAMPSimple builder];
}
- (PEXPbAMPSimpleBuilder*) toBuilder {
  return [PEXPbAMPSimple builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  if (self.hasNonce) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nonce", [NSNumber numberWithInteger:self.nonce]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PEXPbAMPSimple class]]) {
    return NO;
  }
  PEXPbAMPSimple *otherMessage = other;
  return
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      self.hasNonce == otherMessage.hasNonce &&
      (!self.hasNonce || self.nonce == otherMessage.nonce) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  if (self.hasNonce) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.nonce] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PEXPbAMPSimpleBuilder()
@property (strong) PEXPbAMPSimple* result;
@end

@implementation PEXPbAMPSimpleBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PEXPbAMPSimple alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PEXPbAMPSimpleBuilder*) clear {
  self.result = [[PEXPbAMPSimple alloc] init];
  return self;
}
- (PEXPbAMPSimpleBuilder*) clone {
  return [PEXPbAMPSimple builderWithPrototype:result];
}
- (PEXPbAMPSimple*) defaultInstance {
  return [PEXPbAMPSimple defaultInstance];
}
- (PEXPbAMPSimple*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PEXPbAMPSimple*) buildPartial {
  PEXPbAMPSimple* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PEXPbAMPSimpleBuilder*) mergeFrom:(PEXPbAMPSimple*) other {
  if (other == [PEXPbAMPSimple defaultInstance]) {
    return self;
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  if (other.hasNonce) {
    [self setNonce:other.nonce];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PEXPbAMPSimpleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PEXPbAMPSimpleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMessage:[input readData]];
        break;
      }
      case 16: {
        [self setNonce:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMessage {
  return result.hasMessage;
}
- (NSData*) message {
  return result.message;
}
- (PEXPbAMPSimpleBuilder*) setMessage:(NSData*) value {
  result.hasMessage = YES;
  result.message = value;
  return self;
}
- (PEXPbAMPSimpleBuilder*) clearMessage {
  result.hasMessage = NO;
  result.message = [NSData data];
  return self;
}
- (BOOL) hasNonce {
  return result.hasNonce;
}
- (UInt32) nonce {
  return result.nonce;
}
- (PEXPbAMPSimpleBuilder*) setNonce:(UInt32) value {
  result.hasNonce = YES;
  result.nonce = value;
  return self;
}
- (PEXPbAMPSimpleBuilder*) clearNonce {
  result.hasNonce = NO;
  result.nonce = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
