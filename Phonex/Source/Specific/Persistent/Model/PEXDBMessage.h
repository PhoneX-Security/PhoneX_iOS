//
// Created by Dusan Klinec on 26.10.14.
// Copyright (c) 2014 PhoneX. All rights reserved.
//
#ifndef _PEXDBMessage_H_
#define _PEXDBMessage_H_
#import <Foundation/Foundation.h>
#import "PEXDbModelBase.h"

@class PEXDbContact;
@class PEXDbContentProvider;
@class PEXDbContentProvider;

#define PEXDBMessage_DECRYPTION_STATUS_DECRYPTION_ERROR 3  // Error occurred during message decryption (e.g., bad key).
#define PEXDBMessage_DECRYPTION_STATUS_NOT_DECRYPTED 0     // Message is not decrypted yet.
#define PEXDBMessage_DECRYPTION_STATUS_NO_ENCRYPTION 1     // Message not arrived in ciphertext form.
#define PEXDBMessage_DECRYPTION_STATUS_OK 2                // Message was decrypted successfully.
#define PEXDBMessage_ERROR_DECRYPT_GENERIC 101             // Generic decryption error (e.g., bad format).
#define PEXDBMessage_ERROR_ENCRYPT_GENERIC 102             // Generic decryption error (e.g., bad format).
#define PEXDBMessage_ERROR_MISSING_CERT 100                // Certificate is missing - message cannot be verified.

#define PEXDBMessage_MESSAGE_TYPE_ENCRYPT_FAIL 30
#define PEXDBMessage_MESSAGE_TYPE_FAILED 5
#define PEXDBMessage_MESSAGE_TYPE_FILE_DOWNLOADED 10
#define PEXDBMessage_MESSAGE_TYPE_FILE_DOWNLOADING_META 22
#define PEXDBMessage_MESSAGE_TYPE_FILE_DOWNLOADED_META 23
#define PEXDBMessage_MESSAGE_TYPE_FILE_DOWNLOADING 9
#define PEXDBMessage_MESSAGE_TYPE_FILE_DOWNLOAD_FAIL 15
#define PEXDBMessage_MESSAGE_TYPE_FILE_ERROR_RECEIVING 13
#define PEXDBMessage_MESSAGE_TYPE_FILE_READY 11
#define PEXDBMessage_MESSAGE_TYPE_FILE_REJECTED 12
#define PEXDBMessage_MESSAGE_TYPE_FILE_UPLOADED 8
#define PEXDBMessage_MESSAGE_TYPE_FILE_UPLOADING 7
#define PEXDBMessage_MESSAGE_TYPE_FILE_UPLOADING_FILES 42
#define PEXDBMessage_MESSAGE_TYPE_FILE_UPLOAD_FAIL 14
#define PEXDBMessage_MESSAGE_TYPE_INBOX 1
#define PEXDBMessage_MESSAGE_TYPE_PENDING 6
#define PEXDBMessage_MESSAGE_TYPE_QUEUED 20
#define PEXDBMessage_MESSAGE_TYPE_QUEUED_BACKOFF 21
#define PEXDBMessage_MESSAGE_TYPE_SENT 2

#define PEXDBMessage_STATUS_NONE -1

FOUNDATION_EXPORT NSString *PEXDBMessage_TABLE_NAME;
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_ID;
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_ID_FROM_THREADS_ALIAS;
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_FROM;
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_TO;
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_CONTACT;
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_BODY;
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_BODY_HASH;
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_BODY_DECRYPTED;
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_SIGNATURE_OK;

/**
* Flag determining whether decryption of encrypted body part was already done + signature verif.
*
* @see String
*/
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_DECRYPTION_STATUS;

/**
* Random number generated by remote party associated with this message (freshness)
*
* @see String
*/
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_RANDOM_NUM;
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_SEND_DATE;
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_RESEND_DATE;
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_IS_OUTGOING;
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_IS_OFFLINE;
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_ERROR_CODE;
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_ERROR_TEXT;
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_MIME_TYPE;

/**
* Way type of the message.
*
* @see Integer
* @see #MESSAGE_TYPE_INBOX
* @see #MESSAGE_TYPE_FAILED
* @see #MESSAGE_TYPE_PENDING
* @see #MESSAGE_TYPE_SENT
*/
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_TYPE;

/**
* Reception date of the message.
*
* @see Long
*/
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_DATE;

/**
* Latest pager status.
*
* @see Integer
*/
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_STATUS;

/**
* Read status of the message.
*
* @see Boolean
*/
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_READ;
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_READ_DATE;
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_SEND_COUNTER;
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_FROM_FULL;

/**
* ID for a corresponding file, null in case of non-file message
*
* @see String
*/
FOUNDATION_EXPORT NSString *PEXDBMessage_FIELD_FILE_NONCE;
FOUNDATION_EXPORT NSString *PEXDBMessage_MIME_TEXT;
FOUNDATION_EXPORT NSString *PEXDBMessage_MIME_FILE;
FOUNDATION_EXPORT NSString *PEXDBMessage_THREAD_ALIAS;
FOUNDATION_EXPORT NSString *PEXDBMessage_SELF;

/**
* SIP secured message MIME type for text messages
* when decrypted, saved as text/plain (see PEXDBMessage_MIME_TEXT)
*/
FOUNDATION_EXPORT NSString *PEXDBMessage_SECURE_MSG_MIME;

/**
* SIP notification MIME
* when decrypted, saved as text/file (see SipMessage.MIME_FILE)
*/
FOUNDATION_EXPORT NSString *PEXDBMessage_SECURE_FILE_NOTIFY_MIME;

@interface PEXDbMessage : PEXDbModelBase { }
@property (nonatomic) NSNumber * id; // int64_t
@property (nonatomic) NSString * from;
@property (nonatomic) NSString * fullFrom; // DEPRECATED
@property (nonatomic) NSString * to;
@property (nonatomic) NSString * contact; // DEPRECATED
@property (nonatomic) NSString * body;
@property (nonatomic) NSString * mimeType;
@property (nonatomic) NSString * bodyHash;
@property (nonatomic) NSDate   * date; // (int64_t)
@property (nonatomic) NSNumber * type; // int
@property (nonatomic) NSNumber * status; // int
@property (nonatomic) NSNumber * read; // bool
@property (nonatomic) NSDate * readDate; // (int64_t)
@property (nonatomic) NSNumber * isOutgoing; // bool
@property (nonatomic) NSNumber * isOffline; // bool
@property (nonatomic) NSString * bodyDecrypted;
@property (nonatomic) NSNumber * signatureOK; // bool
@property (nonatomic) NSNumber * decryptionStatus; // int
@property (nonatomic) NSNumber * randNum;
@property (nonatomic) NSDate   * sendDate; // (int64_t)
@property (nonatomic) NSDate   * resendDate; // (int64_t)
@property (nonatomic) NSNumber * errorCode; // int. May contain SIP error code or FT error code (depending on type).
@property (nonatomic) NSString * errorText;
@property (nonatomic) NSNumber * sendCounter; // int DEPRECATED
@property (nonatomic) NSString * fileNonce;

+(NSString *) getCreateTable;
+(NSArray *) getFullProjection;
+(NSArray *) getLightProjection;
+(NSArray *) getFileRelatedProjection;
+(NSArray *) getNewestMessageFullProjection;
+(NSArray *) getOldestMessageFullProjection;

+(NSString * const) getNewestMessageFullProjectionGroupBy;
+(NSString * const) getSortByDateOldestFirst;
+(NSString * const) getSortByDateNewestFirst;
+(NSString * const)getSortByIdOldestFirst;

+(NSString * const) getWhereForIdAndContact;
+(NSArray *) getWhereForId: (NSNumber * const) itemId
            AndContactArgs: (const PEXDbContact * const) contact;

+(NSString * const) getWhereForContact;
+(NSString * const) getWhereForIncoming;
+(NSString * const) getWhereForSelf;
+(NSArray*) getWhereForContactArgs: (const PEXDbContact * const) contact;
+(NSString * const) getWhereForId;
+(NSString * const) getWhereForOlderThan;
+(NSString *) getWhereForIds: (NSArray * const) ids;
+(NSArray *) getWhereForIdsArgs: (NSArray * const) ids;
+(NSArray*) getWhereForIdArgs: (const NSNumber * const) IdValue;
+(NSString * const) getWhereForReadAllForSip;
+(NSArray*) getWhereForReadAllForSipArgs: (NSString * const) sip;

+(const PEXDbUri * const) getURI;
+(const PEXDbUri * const) getURIBase;

- (instancetype)initWithFrom:(NSString *)from to:(NSString *)to contact:(NSString *)contact body:(NSString *)body
                    mimeType:(NSString *)mimeType date:(NSDate *)date type:(NSNumber *)type fullFrom:(NSString *)fullFrom;

+ (instancetype)messageWithFrom:(NSString *)from to:(NSString *)to contact:(NSString *)contact body:(NSString *)body
                       mimeType:(NSString *)mimeType date:(NSDate *)date type:(NSNumber *)type fullFrom:(NSString *)fullFrom;

- (NSString *)getDisplayName;
- (NSString *)getRemoteParty;
- (NSString *)getPlainBody;
- (void)copyAllFieldsTo:(PEXDbMessage *)other;

+(int) loadSendCounter: (PEXDbContentProvider *) cr messageId: (int64_t) messageId;

/**
* Loads message by ID.
* Uses file related projection.
*
* @param cr
* @param messageId
* @return
*/
+(id) initById: (PEXDbContentProvider *) cr messageId: (int64_t) messageId;

/**
* Loads message by ID.
* @param cr
* @param messageId
* @return
*/
+(id) initById: (PEXDbContentProvider *) cr messageId: (int64_t) messageId projection: (NSArray*) projection;

/**
* Deletes message by given message id.
* @param cr
* @param messageId
* @return
*/
+(int) deleteById: (PEXDbContentProvider *) cr messageId: (int64_t) messageId;

/**
* set SipMessage Type property
* @param cr
* @param messageId
* @param messageType
*/
+(void) setMessageType: (PEXDbContentProvider *) cr messageId: (int64_t) messageId messageType: (int) messageType;

/**
* Sets message type, error code and error text.
*
* @param cr
* @param msgid
* @param msgtype
* @param errCode
* @param errText
* @return
*/
+(int) setMessageError: (PEXDbContentProvider *) cr messageId: (int64_t) messageId messageType: (int) messageType
               errCode: (int) errCode errText: (NSString *) errText;

/**
* Updates message with given ID with provided content values.
*
* @param cr
* @param msgid
* @param cv
* @return
*/
+(int) updateMessage: (PEXDbContentProvider *) cr messageId: (int64_t) messageId contentValues: (PEXDbContentValues *) cv;

/**
* Gets random number for a message. If it does not exist, new one is generated & message is updated.
*/
-(uint32_t) getOrEstablishRandNum: (PEXDbContentProvider *) cr;

/**
* Returns array of message IDs related to the user. i.e. he sent the or we send message to him.
*/
+(NSArray *) getAllFileMsgIdsRelatedToUser: (NSString *) username cr: (PEXDbContentProvider *) cr;

/**
* Load particular message by nonce, outgoing/ingoing, from & to contacts.
*/
+ (instancetype) messageByNonce2: (NSString *) nonce2 isOutgoing: (NSNumber *) outgoing to: (NSString *) to from: (NSString *) from cr: (PEXDbContentProvider *) cr;

- (id)initWithCoder:(NSCoder *)coder;
- (void)encodeWithCoder:(NSCoder *)coder;

+ (PEXDbMessage *) messageFromCursor: (PEXDbCursor * const) cursor;

- (BOOL)isEqualToMessage:(const PEXDbMessage * const)message;

- (bool) isFile;

- (BOOL) canBeForwarded;

+ (NSString *) getContactSipFromMessage: (const PEXDbMessage * const) message;

+ (bool) messageIsSeenAndOutgoing: (const PEXDbMessage * const) message;

@end


#endif // _PEXDBMessage_H_
