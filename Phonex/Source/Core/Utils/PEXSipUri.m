//
// Created by Dusan Klinec on 24.10.14.
// Copyright (c) 2014 PhoneX. All rights reserved.
//

#import "PEXSipUri.h"
//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/dusanklinec/workspace/phonex2translate/SipUri.java
//

#import "PEXRegex.h"
#import "PEXUtils.h"

@implementation PEXSipUri

NSString * PEX_SIPURI_DIGIT_NBR_RULE_ = @"^[0-9\\-#\\+\\*\\(\\)]+$";
NSString * PEX_SIPURI_SIP_SCHEME_RULE_ = @"sip(?:s)?|tel";

+ (NSRegularExpression *) PEX_SIPURI_SIP_CONTACT_PATTERN {
    static dispatch_once_t once;
    static NSRegularExpression * SIP_CONTACT_PATTERN;
    dispatch_once(&once, ^{
        SIP_CONTACT_PATTERN =
                [PEXRegex regularExpressionWithString:@"^(?:\")?([^<\"]*)(?:\")?[ ]*(?:<)?(sip(?:s)?|tel):([^@]+)@([^>]+)(?:>)?$"
                                      isCaseSensitive:NO error:nil];
    });
    return SIP_CONTACT_PATTERN;
}

+ (NSRegularExpression *) PEX_SIPURI_SIP_HOST_PATTERN {
    static dispatch_once_t once;
    static NSRegularExpression * SIP_CONTACT_PATTERN;
    dispatch_once(&once, ^{
        SIP_CONTACT_PATTERN =
                [PEXRegex regularExpressionWithString:@"^(?:\")?([^<\"]*)(?:\")?[ ]*(?:<)?(sip(?:s)?|tel):([^@>]+)(?:>)?$"
                                      isCaseSensitive:NO error:nil];
    });
    return SIP_CONTACT_PATTERN;
}

+ (NSRegularExpression *) PEX_SIPURI_SIP_CONTACT_ADDRESS_PATTERN {
    static dispatch_once_t once;
    static NSRegularExpression * SIP_CONTACT_PATTERN;
    dispatch_once(&once, ^{
        SIP_CONTACT_PATTERN =
                [PEXRegex regularExpressionWithString:@"^([^@:]+)@([^@:]+\\.[^@]+)$"
                                      isCaseSensitive:NO error:nil];
    });
    return SIP_CONTACT_PATTERN;
}

+ (NSRegularExpression *) PEX_SIPURI_SIP_CONTACT_EASY_PATTERN {
    static dispatch_once_t once;
    static NSRegularExpression * SIP_CONTACT_PATTERN;
    dispatch_once(&once, ^{
        SIP_CONTACT_PATTERN =
                [PEXRegex regularExpressionWithString:@"^(?:\")?([^<\"]*)(?:\")?[ ]*(?:<)?sip(?:s)?:([^@]*@[^>]*)(?:>)?"
                                      isCaseSensitive:YES error:nil];
    });
    return SIP_CONTACT_PATTERN;
}

+ (NSRegularExpression *) PEX_SIPURI_SIP_URI_PATTERN {
    static dispatch_once_t once;
    static NSRegularExpression * SIP_CONTACT_PATTERN;
    dispatch_once(&once, ^{
        SIP_CONTACT_PATTERN =
                [PEXRegex regularExpressionWithString:@"^(sip(?:s)?):(?:[^:]*(?::[^@]*)?@)?([^:@]*)(?::([0-9]*))?$"
                                      isCaseSensitive:YES error:nil];
    });
    return SIP_CONTACT_PATTERN;
}

- (instancetype)init {
    return [super init];
}

+ (PEXSIPURIParsedSipContact *)parseSipContact:(NSString *)sipUri {
    PEXSIPURIParsedSipContact *parsedInfos = [[PEXSIPURIParsedSipContact alloc] init];
    if (sipUri==nil || [sipUri length]==0) {
        return parsedInfos;
    }

    NSRange range = NSMakeRange(0, sipUri.length);
    NSRegularExpression *regex = [self PEX_SIPURI_SIP_CONTACT_PATTERN];
    NSArray * m = [regex matchesInString:sipUri options:0 range:range];
    if (m!=nil && [m count]>0){
        NSTextCheckingResult * res = m[0];
        parsedInfos.displayName = [[PEXRegex getStringAtRange:sipUri range:[res rangeAtIndex:1]] stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
        parsedInfos.domain = [PEXRegex getStringAtRange:sipUri range:[res rangeAtIndex:4]];
        parsedInfos.userName = [[PEXRegex getStringAtRange:sipUri range:[res rangeAtIndex:3]] stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
        parsedInfos.scheme = [PEXRegex getStringAtRange:sipUri range:[res rangeAtIndex:2]];
    } else {
        regex = [self PEX_SIPURI_SIP_HOST_PATTERN];
        m = [regex matchesInString:sipUri options:0 range:range];
        if (m!=nil && [m count]>0){
            NSTextCheckingResult * res = m[0];
            parsedInfos.displayName = [[PEXRegex getStringAtRange:sipUri range:[res rangeAtIndex:1]] stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
            parsedInfos.domain = [PEXRegex getStringAtRange:sipUri range:[res rangeAtIndex:3]];
            parsedInfos.scheme = [PEXRegex getStringAtRange:sipUri range:[res rangeAtIndex:2]];
        } else {
            regex = [self PEX_SIPURI_SIP_CONTACT_ADDRESS_PATTERN];
            m = [regex matchesInString:sipUri options:0 range:range];
            if (m!=nil && [m count]>0) {
                NSTextCheckingResult * res = m[0];
                parsedInfos.userName = [[PEXRegex getStringAtRange:sipUri range:[res rangeAtIndex:1]] stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
                parsedInfos.domain = [PEXRegex getStringAtRange:sipUri range:[res rangeAtIndex:2]];
            }
            else {
                parsedInfos.userName = sipUri;
            }
        }
    }

    return parsedInfos;
}

+ (NSString *)getDisplayedSimpleContact:(NSString *)uri {
    if (uri == nil){
        return @"";
    }

    NSString *remoteContact = uri;
    PEXSIPURIParsedSipContact *parsedInfos = [self parseSipContact:remoteContact];
    if (parsedInfos!=nil && ![PEXUtils isEmpty:parsedInfos.displayName]) {
        remoteContact = parsedInfos.displayName;
    }
    else if (parsedInfos!=nil) {
        remoteContact = parsedInfos.userName;
    }
    return remoteContact;

}

+ (NSString *)getCanonicalSipContact:(NSString *)sipContact {
    return [self getCanonicalSipContact:sipContact includeScheme:YES];
}

+ (NSString *)getCanonicalSipContact:(NSString *)sipContact
                       includeScheme:(BOOL)includeScheme {
    NSMutableString * sb = [[NSMutableString alloc] init];
    if ([PEXUtils isEmpty:sipContact]) {
        return @"";
    }

    BOOL hasUsername = NO;
    BOOL isHost = NO;

    NSRange range = NSMakeRange(0, sipContact.length);
    NSRegularExpression *regex = [self PEX_SIPURI_SIP_CONTACT_PATTERN];
    NSArray * m = [regex matchesInString:sipContact options:0 range:range];
    if (m!=nil && [m count]>0){
        hasUsername = YES;
    } else {
        regex = [self PEX_SIPURI_SIP_HOST_PATTERN];
        m = [regex matchesInString:sipContact options:0 range:range];
        isHost = YES;
    }

    if (m!=nil && [m count]>0){
        NSTextCheckingResult * res = m[0];
        if (includeScheme || isHost) {
            [sb appendString:[PEXRegex getStringAtRange:sipContact range:[res rangeAtIndex:2]]];
            [sb appendString:@":"];
        }
        [sb appendString:[PEXRegex getStringAtRange:sipContact range:[res rangeAtIndex:3]]];
        if (hasUsername) {
            [sb appendString:@"@"];
            [sb appendString:[PEXRegex getStringAtRange:sipContact range:[res rangeAtIndex:4]]];
        }
    } else {
        regex = [self PEX_SIPURI_SIP_CONTACT_ADDRESS_PATTERN];
        m = [regex matchesInString:sipContact options:0 range:range];
        if (m!=nil && [m count]>0){
            if (includeScheme) {
                [sb appendString:@"sips:"];
            }
            [sb appendString:sipContact];
        } else {
            [sb appendString:sipContact];
        }
    }
    return sb;
}

+ (NSString *)stripSipScheme:(NSString *)userName {
    if (userName == nil) {
        return nil;
    }

    NSString * mUser = userName;
    if ([mUser rangeOfString:@"csips:"].location != NSNotFound) {
        mUser = [[mUser stringByReplacingOccurrencesOfString:@"csips:" withString:@""] mutableCopy];
    }

    if ([mUser rangeOfString:@"sips:"].location != NSNotFound) {
        mUser = [[mUser stringByReplacingOccurrencesOfString:@"sips:" withString:@""] mutableCopy];
    }

    if ([mUser rangeOfString:@"csip:"].location != NSNotFound) {
        mUser = [[mUser stringByReplacingOccurrencesOfString:@"csip:" withString:@""] mutableCopy];
    }

    if ([mUser rangeOfString:@"sip:"].location != NSNotFound) {
        mUser = [[mUser stringByReplacingOccurrencesOfString:@"sip:" withString:@""] mutableCopy];
    }

    return mUser;
}

+ (PEXSIPURIParsedSipUri *)parseSipUri:(NSString *)sipUri {
    PEXSIPURIParsedSipUri *parsedInfos = [[PEXSIPURIParsedSipUri alloc] init];
    if ([PEXUtils isEmpty:sipUri]) {
        return parsedInfos;
    }

    NSRange range = NSMakeRange(0, sipUri.length);
    NSRegularExpression *regex = [self PEX_SIPURI_SIP_URI_PATTERN];
    NSArray * m = [regex matchesInString:sipUri options:0 range:range];
    if (m!=nil && [m count]>0){
        NSTextCheckingResult * res = m[0];
        parsedInfos.scheme = [PEXRegex getStringAtRange:sipUri range:[res rangeAtIndex:1]];
        parsedInfos.domain = [PEXRegex getStringAtRange:sipUri range:[res rangeAtIndex:2]];
        NSString * oPort = [PEXRegex getStringAtRange:sipUri range:[res rangeAtIndex:3]];
        if (oPort != nil) {
            @try {
                parsedInfos.port = [oPort intValue];
            }
            @catch (NSException *e) {
            }
        }
    }
    return parsedInfos;
}

+ (NSString *)forgeSipUri:(NSString *)scheme
              withContact:(NSString *)contact {
    PEXSIPURIParsedSipContact * info = [self parseSipContact:contact];
    return [[NSString alloc] initWithFormat:@"%@:%@@%@", scheme, info.userName, info.domain];
}

+ (NSString *)encodeUser:(NSString *)user {
    return [user stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet characterSetWithCharactersInString:@"&=+$,;?/-_.!~*'()"]];
}

+ (NSString *)getSipFromContact:(NSString *)contact {
    NSRange range = NSMakeRange(0, contact.length);
    NSRegularExpression *regex = [self PEX_SIPURI_SIP_CONTACT_EASY_PATTERN];
    NSArray * m = [regex matchesInString:contact options:0 range:range];
    NSString *number = contact;
    if (m!=nil && [m count]>0){
        NSTextCheckingResult * res = m[0];
        number = [PEXRegex getStringAtRange:contact range:[res rangeAtIndex:2]];
        return number;
    }

    return nil;
}

+ (NSString *)getDomainFromSip:(NSString *)sip parsed: (PEXSIPURIParsedSipUri **) parsed{
    NSString * tmpSipWithScheme = [PEXSipUri getCanonicalSipContact:sip includeScheme:YES];
    PEXSIPURIParsedSipUri * mytsinfo = [PEXSipUri parseSipUri:tmpSipWithScheme];

    if (parsed != NULL){
        *parsed = mytsinfo;
    }

    NSString * domain = mytsinfo.domain;
    return domain;
}


@end


@implementation PEXSIPURIParsedSipContact

- (NSString *)description {
    return [self toStringWithBoolean:YES];
}

- (NSString *)toStringWithBoolean:(BOOL)includeDisplayName {
    NSMutableString *sb = [[NSMutableString alloc] init];

    // Start with display name.
    if (includeDisplayName && ![PEXUtils isEmpty:_displayName]) {
        [sb appendFormat:@"\"%@\" ", [_displayName stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLQueryAllowedCharacterSet]]];
    }

    // Other parts of the URI.
    if ([PEXUtils isEmpty:_scheme]) {
        [sb appendString:@"<sip:"];
    } else {
        [sb appendFormat:@"<%@:", _scheme];
    }

    if (![PEXUtils isEmpty:_userName]) {
        [sb appendFormat:@"%@@", _userName];
    }

    [sb appendFormat:@"%@>", _domain];
    return [sb description];
}

- (NSString *)getContactAddress {
    NSMutableString * sb = [[NSMutableString alloc] init];
    if (![PEXUtils isEmpty:_userName]){
        [sb appendFormat:@"%@@", _userName];
    }

    [sb appendString:_domain];
    return sb;
}

- (instancetype)init {
    if (self = [super init]) {
        self.displayName = @"";
        self.domain = @"";
        self.scheme = @"";
        self.userName = @"";
    }
    return self;
}

- (void)copyAllFieldsTo:(PEXSIPURIParsedSipContact *)other {
    other.displayName = _displayName;
    other.domain = _domain;
    other.scheme = _scheme;
    other.userName = _userName;
}

@end

@implementation PEXSIPURIParsedSipUri
- (instancetype)init {
    if (self = [super init]) {
        self.domain = @"";
        self.scheme = @"sips";
        self.port = 5060;
    }
    return self;
}

- (void)copyAllFieldsTo:(PEXSIPURIParsedSipUri *)other {
    other.domain = _domain;
    other.scheme = _scheme;
    other.port = _port;
}

@end

