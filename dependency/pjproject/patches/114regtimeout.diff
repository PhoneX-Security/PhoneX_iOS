Index: pjproject/sources/pjsip/include/pjsua-lib/pjsua.h
===================================================================
--- pjproject.orig/sources/pjsip/include/pjsua-lib/pjsua.h
+++ pjproject/sources/pjsip/include/pjsua-lib/pjsua.h
@@ -3498,6 +3498,15 @@ typedef struct pjsua_acc_config
      */
     pj_bool_t         register_on_acc_add;
 
+    /**
+     * Timeout for sending register requests.
+     * If 0 is used, internal timeout value is used.
+     * Value is in milliseconds.
+     *
+     * Default: 0
+     */
+    pj_uint32_t        register_tsx_timeout;
+
 } pjsua_acc_config;
 
 
Index: pjproject/sources/pjsip/src/pjsua-lib/pjsua_core.c
===================================================================
--- pjproject.orig/sources/pjsip/src/pjsua-lib/pjsua_core.c
+++ pjproject/sources/pjsip/src/pjsua-lib/pjsua_core.c
@@ -304,6 +304,7 @@ PJ_DEF(void) pjsua_acc_config_default(pj
     cfg->register_on_acc_add = PJ_TRUE;
     cfg->mwi_expires = PJSIP_MWI_DEFAULT_EXPIRES;
 
+    cfg->register_tsx_timeout = 0;
     cfg->media_stun_use = PJSUA_STUN_RETRY_ON_FAILURE;
 }
 
Index: pjproject/sources/pjsip/src/pjsip-ua/sip_reg.c
===================================================================
--- pjproject.orig/sources/pjsip/src/pjsip-ua/sip_reg.c
+++ pjproject/sources/pjsip/src/pjsip-ua/sip_reg.c
@@ -111,6 +111,7 @@ struct pjsip_regc
      * it open.
      */
     pjsip_transport		*last_transport;
+    pj_uint32_t			 tsx_timeout;
 };
 
 
@@ -135,6 +136,7 @@ PJ_DEF(pj_status_t) pjsip_regc_create( p
     regc->token = token;
     regc->cb = cb;
     regc->expires = PJSIP_REGC_EXPIRATION_NOT_SPECIFIED;
+    regc->tsx_timeout = REGC_TSX_TIMEOUT;
     regc->add_xuid_param = pjsip_cfg()->regc.add_xuid_param;
 
     status = pj_lock_create_recursive_mutex(pool, pool->obj_name, 
@@ -446,6 +448,15 @@ PJ_DEF(pj_status_t) pjsip_regc_set_trans
     return PJ_SUCCESS;
 }
 
+PJ_DEF(pj_status_t) pjsip_regc_set_tsx_timeout(pjsip_regc *regc, pj_uint32_t timeout){
+    PJ_ASSERT_RETURN(regc, PJ_EINVAL);
+
+    pj_uint32_t newTimeout = timeout == 0 ? REGC_TSX_TIMEOUT : timeout;
+    regc->tsx_timeout = newTimeout;
+
+    return PJ_SUCCESS;
+}
+
 /* Release transport */
 PJ_DEF(pj_status_t) pjsip_regc_release_transport(pjsip_regc *regc)
 {
@@ -1431,7 +1442,7 @@ PJ_DEF(pj_status_t) pjsip_regc_send(pjsi
     pj_lock_release(regc->lock);
 
     /* Now send the message */
-    status = pjsip_endpt_send_request(regc->endpt, tdata, REGC_TSX_TIMEOUT,
+    status = pjsip_endpt_send_request(regc->endpt, tdata, (pj_int32_t) regc->tsx_timeout,
 				      regc, &regc_tsx_callback);
     if (status!=PJ_SUCCESS) {
 	/* On failure, regc_tsx_callback() may not be called, so we need
Index: pjproject/sources/pjsip/include/pjsip-ua/sip_regc.h
===================================================================
--- pjproject.orig/sources/pjsip/include/pjsip-ua/sip_regc.h
+++ pjproject/sources/pjsip/include/pjsip-ua/sip_regc.h
@@ -313,6 +313,16 @@ PJ_DECL(pj_status_t) pjsip_regc_set_tran
 					      const pjsip_tpselector *sel);
 
 /**
+ * Sets timeout for new register transactions.
+ *
+ * @param regc	    The client registration instance.
+ * @param timeout	Timeout in milliseconds.
+ *
+ * @return	    PJ_SUCCESS on success, or the appropriate error code.
+ */
+PJ_DECL(pj_status_t) pjsip_regc_set_tsx_timeout(pjsip_regc *regc, pj_uint32_t timeout);
+
+/**
  * Release the reference to current transport being used by the regc, if any.
  * The regc keeps the reference to the last transport being used in order
  * to prevent it from being destroyed. In some situation however, such as
Index: pjproject/sources/pjsip/src/pjsua-lib/pjsua_acc.c
===================================================================
--- pjproject.orig/sources/pjsip/src/pjsua-lib/pjsua_acc.c
+++ pjproject/sources/pjsip/src/pjsua-lib/pjsua_acc.c
@@ -1215,6 +1215,12 @@ PJ_DEF(pj_status_t) pjsua_acc_modify( pj
 
 	update_reg = PJ_TRUE;
     }
+	if (acc->cfg.register_tsx_timeout != cfg->register_tsx_timeout){
+		acc->cfg.register_tsx_timeout = cfg->register_tsx_timeout;
+		if (acc->regc != NULL) {
+			pjsip_regc_set_tsx_timeout(acc->regc, acc->cfg.register_tsx_timeout);
+		}
+	}
     acc->cfg.unreg_timeout = cfg->unreg_timeout;
     acc->cfg.allow_contact_rewrite = cfg->allow_contact_rewrite;
     acc->cfg.reg_retry_interval = cfg->reg_retry_interval;
@@ -2487,6 +2493,7 @@ static pj_status_t pjsua_regc_init(int a
 	pjsip_regc_add_headers(acc->regc, &hdr_list);
     }
 
+	pjsip_regc_set_tsx_timeout(acc->regc, acc->cfg.register_tsx_timeout);
     pj_pool_release(pool);
 
     return PJ_SUCCESS;
